# -*- coding: utf-8 -*-
"""random forest or decision tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7nCgwGWxhoO9MIzlksi2ew--2SWRWno
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("classification_dataset.csv")
X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.25, random_state= 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators= 10, criterion= 'entropy', random_state=0)
classifier.fit(X_train, y_train)

new_input = [[30, 50000, 1, 0, 1]]
new_input_scaled = sc.transform(new_input)

prediction = classifier.predict(new_input_scaled)

print("Prediction (1 = Buy, 0 = Not Buy):", prediction[0])

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

import seaborn as sns
import matplotlib.pyplot as plt


importances = classifier.feature_importances_
feature_names = ['Age', 'Income', 'EducationLevel', 'MaritalStatus', 'OwnsHouse']

plt.figure(figsize=(8, 5))
sns.barplot(x=importances, y=feature_names)
plt.title('Feature Importances from Random Forest')
plt.xlabel('Importance Score')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()


cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Not Buy', 'Buy'], yticklabels=['Not Buy', 'Buy'])
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.tight_layout()
plt.show()


results_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print("\nSample of Actual vs Predicted:")
print(results_df.head(20))